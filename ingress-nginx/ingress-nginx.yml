# Source: gitlab/charts/nginx-ingress/templates/controller-poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app: nginx-ingress
    release: gitlab
    component: "controller"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-controller
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: gitlab
      component: "controller"
  minAvailable: 1

---
# Source: gitlab/charts/nginx-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    release: gitlab
    component: "controller"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress
---
# Source: gitlab/charts/nginx-ingress/templates/default-backend-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    release: gitlab  
    component: "controller"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: default-backend
  name: gitlab-nginx-ingress-backend

---
# Source: gitlab/charts/nginx-ingress/templates/controller-configmap-addheaders.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: "controller"
    app: nginx-ingress
    release: gitlab
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-custom-add-headers
data: 
  Referrer-Policy: strict-origin-when-cross-origin

---
# Source: gitlab/charts/nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
    release: gitlab
    component: "controller"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-controller
data:
  add-headers: gitlab/gitlab-nginx-ingress-custom-add-headers
  hsts: "false"
  hsts-include-subdomains: "false"
  server-name-hash-bucket-size: "256"
  server-tokens: "false"
  ssl-ciphers: ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4
  ssl-protocols: TLSv1.3 TLSv1.2
  use-http2: "true"

---

# Source: gitlab/charts/nginx-ingress/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: nginx-ingress
    release: gitlab
    component: "controller"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - "networking.k8s.io" # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-gitlab-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: gitlab/charts/nginx-ingress/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
    release: gitlab
    component: "controller"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: gitlab-nginx-ingress

---

# Source: gitlab/charts/nginx-ingress/templates/controller-service-metrics.yaml
apiVersion: v1
kind: Service
metadata:
  annotations: 
    gitlab.com/prometheus_port: "10254"
    gitlab.com/prometheus_scrape: "true"
    prometheus.io/port: "10254"
    prometheus.io/scrape: "true"
  labels:
    app: nginx-ingress
    release: gitlab
    component: "controller"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-controller-metrics
spec:
  type: ClusterIP
  ports:
    - name: metrics
      port: 9913
      targetPort: metrics
  selector:
    app: nginx-ingress
    release: gitlab
    component: "controller"
---
# Source: gitlab/charts/nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    release: gitlab
    component: "controller"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-controller
spec:
  type: LoadBalancer
  loadBalancerIP: 192.168.0.40
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    - name: gitlab-shell
      port: 22
      protocol: TCP
      targetPort: gitlab-shell
  selector:
    app: nginx-ingress
    release: gitlab
    component: "controller"
---
# Source: gitlab/charts/nginx-ingress/templates/default-backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx-ingress
    release: gitlab
    component: "default-backend"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: default-backend
  name: gitlab-nginx-ingress-default-backend
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
  selector:
    app: nginx-ingress
    release: gitlab
    component: "default-backend"

---

# Source: gitlab/charts/nginx-ingress/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: "controller"
    app: nginx-ingress
    release: gitlab
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-controller
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: gitlab
      component: "controller"
  replicas: 2
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app: nginx-ingress
        release: gitlab
        component: "controller"
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: "k8s.gcr.io/ingress-nginx/controller:v0.41.2@sha256"
          imagePullPolicy: IfNotPresent
          lifecycle: 
            preStop:
              exec:
                command:
                - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/gitlab-nginx-ingress-default-backend
            - --publish-service=$(POD_NAMESPACE)/gitlab-nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --ingress-class=gitlab-nginx
            - --configmap=$(POD_NAMESPACE)/gitlab-nginx-ingress-controller
            - --tcp-services-configmap=gitlab/gitlab-nginx-ingress-tcp
            - --watch-namespace=$(POD_NAMESPACE)
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: metrics
              containerPort: 10254
              protocol: TCP
            - name: gitlab-shell
              containerPort: 22
              protocol: TCP
          resources: 
            requests:
              cpu: 100m
              memory: 100Mi
      
      serviceAccountName: gitlab-nginx-ingress
      terminationGracePeriodSeconds: 300

---

# Source: gitlab/charts/nginx-ingress/templates/default-backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    release: gitlab
    component: "default-backend"
    app.kubernetes.io/version: "0.41.2"
    app.kubernetes.io/component: default-backend
  name: gitlab-nginx-ingress-default-backend
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: gitlab
      component: "default-backend"
  replicas: 1
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app: nginx-ingress
        release: gitlab
        component: "default-backend"
    spec:
      containers:
        - name: nginx-ingress-default-backend
          image: "k8s.gcr.io/defaultbackend-amd64"
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsUser: 65534
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources: 
            requests:
              cpu: 5m
              memory: 5Mi
      
      serviceAccountName: gitlab-nginx-ingress-backend
      terminationGracePeriodSeconds: 60